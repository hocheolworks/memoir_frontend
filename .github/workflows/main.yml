name: ci/cd main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SERVICE_NAME: memoir_frontend

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # Docker Image 빌드
      - name: Build Docker Image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # 서버에서 Docker 이미지 실행
      - name: EC2 Docker Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            echo NEXT_PUBLIC_GITHUB_OAUTH_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GITHUB_OAUTH_CLIENT_ID }} >> .env.production
            echo NEXT_PUBLIC_GITHUB_OAUTH_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_GITHUB_OAUTH_REDIRECT_URI }} >> .env.production
            docker stop ${{ env.SERVICE_NAME }}
            docker rm -f ${{ env.SERVICE_NAME }}
            docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}
            docker run -d -p 3001:3001 --name ${{ env.SERVICE_NAME }} --restart=unless-stopped ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }} --env-file=.env.production

      - name: Remove Github Actions IP From Security Group
        if: ${{ always() }}
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
